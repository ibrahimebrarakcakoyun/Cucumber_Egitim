Cucumber projesi oluşturmak istediğimizde yapmamız gereken adımlar:
1- Öncelikle depency leri pom.xml dosyamıza yüklememiz gerekir.
(selenium-java, webdrivermanager, cucumber-java, cucumber-junit)

2- Sonra file-> settings-> plugins-> marketplace den cucumber gherkin plugin'leri yüklememiz gerekir.

3- Test-> java-> techproed-> 4 tane package altında tutarız
    3.1-pages-> Locate'lerimizi bu package altında tutarız
    3.2-stepDefinition-> Yazdığımız test adımlarının kodlarını tutarız
    3.3-utilities-> Projemiz için oluşturmuş olduğumuz Driver Class'larını bu package'de tutarız.
    3.4-runners-> Bu package altında istediğimiz senaryoları çalıştırır ve raporlar alabiliriz.

4- Test package'ı altında Gherkin language kullanarak yazacağımız .feature  file'lar için resources package'ı oluştururuz

5- Projemizdeki dataları bir yerde toplamak için .properties uzantılı dosya oluştururuz.(proje seviyesinde)

6- feature file'lar için resources package'i altında features isminde bir package daha oluştururuz

7- features package'ı üstüne gelip sağ tıklayıp new file ile feature uzantılı file oluşturalım

--Parallel Testing--
1-Parallel testing yapabilmek için öncelikle sure-fire plugin'i pom.xml dosyamıza eklememiz gerekiyor.
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <parallel>methods</parallel>
                    <threadCount>2</threadCount> <!--aynı anda 2 browser çalıştırılacağı anlamına gelir. -->
                    <perCoreThreadCount>false</perCoreThreadCount>
                    <forkCount>2</forkCount> <!-- iki ayrı işlemi başlatır ve her biri farklı bir test paketi çalıştırır. Bu, testlerin daha hızlı tamamlanmasını sağlar. Ancak, bu ayarın artırılması, sistemin kaynaklarını tüketebilir ve performans sorunlarına neden olabilir. -->
                    <reuseForks>true</reuseForks> <!--Maven önceki testlerde oluşturulmuş işlemleri yeniden kullanır -->
                    <includes>
                        <include>**/runners/*Runner*.java</include>
                    </includes>
                    <testFailureIgnore>true</testFailureIgnore> <!--testin başarısız olmasına rağmen diğer testlere devam eder ve sonunda tüm testleri çalıştırır. -->
                </configuration>
            </plugin>
        </plugins>
    </build>


2- Aynı anda iki farklı scenario çalıştırabilmek için bir tane daha Runner1 isiminde class oluşturduk
(3 farklı scenario çalıştırmak istersek 3 adet runner class`i olmali)
3-tags parametresine hangi scenario'ları çalıştıracaksak onları belirttik.
4- Terminali acarak mvn clean (targeti siler) verify (toparlar ve testleri calistirir) ayni anda scenario`larimizi run ederiz.

(Yada sag taraftaki maven -> lifecycle-> once -> clean'i iki kere tikliyoruz target gidiyor sonra-> verfy iki kere tikliyoruz target tekrar olusuyor)